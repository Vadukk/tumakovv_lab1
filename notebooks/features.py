import pandas as pd
import numpy as np


TARGETS = [
    'Артериальная гипертензия',
    'ОНМК',
    'Стенокардия, ИБС, инфаркт миокарда',
    'Сердечная недостаточность',
    'Прочие заболевания сердца',
]

base_features = [
    ('Пол - М', 'Пол', ['М']),
    ('Семья - в браке в настоящее время', 'Семья', ['в браке в настоящее время']),
    ('Семья - в разводе', 'Семья', ['в разводе']),
    ('Семья - вдовец / вдова', 'Семья', ['вдовец / вдова']),
    ('Семья - гражданский брак / проживание с партнером', 'Семья', ['гражданский брак / проживание с партнером']),
    ('Семья - никогда не был(а) в браке', 'Семья', ['никогда не был(а) в браке']),
    ('Семья - раздельное проживание (официально не разведены)', 'Семья', ['раздельное проживание (официально не разведены)']),
    ('Семья - живет один', 'Семья', ['в разводе', 'вдовец / вдова', 'никогда не был(а) в браке', 'раздельное проживание (официально не разведены)']),
    ('Этнос - европейская', 'Этнос', ['европейская']),
    ('Этнос - другая азиатская', 'Этнос', ['другая азиатская (Корея, Малайзия, Таиланд, Вьетнам, Казахстан, Киргизия, Туркмения, Узбекистан, Таджикистан)']),
    ('Этнос - прочее', 'Этнос', ['прочее (любая иная этно-расовая группа, не представленная выше)']),
    ('Национальность - Азербайджанцы', 'Национальность', ['Азербайджанцы']),
    ('Национальность - Армяне', 'Национальность', ['Армяне']),
    ('Национальность - Башкиры', 'Национальность', ['Башкиры']),
    ('Национальность - Белорусы', 'Национальность', ['Белорусы']),
    ('Национальность - Буряты', 'Национальность', ['Буряты']),
    ('Национальность - Другие национальности', 'Национальность', ['Другие национальности']),
    ('Национальность - Евреи', 'Национальность', ['Евреи']),
    ('Национальность - Казахи', 'Национальность', ['Казахи']),
    ('Национальность - Киргизы', 'Национальность', ['Киргизы']),
    ('Национальность - Лезгины', 'Национальность', ['Лезгины']),
    ('Национальность - Молдаване', 'Национальность', ['Молдаване']),
    ('Национальность - Мордва', 'Национальность', ['Мордва']),
    ('Национальность - Немцы', 'Национальность', ['Немцы']),
    ('Национальность - Русские', 'Национальность', ['Русские']),
    ('Национальность - Таджики', 'Национальность', ['Таджики']),
    ('Национальность - Татары', 'Национальность', ['Татары']),
    ('Национальность - Удмурты', 'Национальность', ['Удмурты']),
    ('Национальность - Украинцы', 'Национальность', ['Украинцы']),
    ('Национальность - Чуваши', 'Национальность', ['Чуваши']),
    ('Национальность - Эстонцы', 'Национальность', ['Эстонцы']),
    ('Национальность - Азия / Кавказ', 'Национальность', ['Азербайджанцы', 'Армяне', 'Казахи', 'Киргизы', 'Лезгины', 'Таджики']),
    ('Национальность - Русские / Белорусы / Украинцы', 'Национальность', ['Русские', 'Белорусы', 'Украинцы']),
    ('Религия - Атеист / агностик', 'Религия', ['Атеист / агностик']),
    ('Религия - Другое', 'Религия', ['Другое']),
    ('Религия - Индуизм', 'Религия', ['Индуизм']),
    ('Религия - Ислам', 'Религия', ['Ислам']),
    ('Религия - Нет', 'Религия', ['Нет']),
    ('Религия - Христианство', 'Религия', ['Христианство']),
    ('Религия - Индуизм / Ислам / Другое', 'Религия', ['Индуизм', 'Ислам', 'Другое']),
    ('Религия - Верующий', 'Религия', ['Другое', 'Индуизм', 'Ислам', 'Христианство']),
    ('Образование - начальная школа', 'Образование', ['2 - начальная школа']),
    ('Образование - среднее', 'Образование', ['3 - средняя школа / закон.среднее / выше среднего']),
    ('Образование - профессиональное училище', 'Образование', ['4 - профессиональное училище']),
    ('Образование - ВУЗ', 'Образование', ['5 - ВУЗ']),
    ('Профессия - ведение домашнего хозяйства', 'Профессия', ['ведение домашнего хозяйства']),
    ('Профессия - вооруженные силы', 'Профессия', ['вооруженные силы']),
    ('Профессия - дипломированные специалисты', 'Профессия', ['дипломированные специалисты']),
    ('Профессия - квалифицированные работники сельского хозяйства и рыболовного', 'Профессия', ['квалифицированные работники сельского хозяйства и рыболовного']),
    ('Профессия - низкоквалифицированные работники', 'Профессия', ['низкоквалифицированные работники']),
    ('Профессия - операторы и монтажники установок и машинного оборудования', 'Профессия', ['операторы и монтажники установок и машинного оборудования']),
    ('Профессия - законотворцы / менеджеры', 'Профессия', ['представители   законодат.   органов   власти,  высокопостав. долж.лица и менеджеры']),
    ('Профессия - сфера обслуживания', 'Профессия', ['работники,  занятые в сфере обслуживания, торговые работники магазинов и рынков']),
    ('Профессия - ремесленники и представители других отраслей промышленности', 'Профессия', ['ремесленники и представители других отраслей промышленности']),
    ('Профессия - служащие', 'Профессия', ['служащие']),
    ('Профессия - техники и младшие специалисты', 'Профессия', ['техники и младшие специалисты']),
    ('Профессия - военные / служащие / управление', 'Профессия', ['вооруженные силы', 'представители   законодат.   органов   власти,  высокопостав. долж.лица и менеджеры', 'служащие']),
    ('Профессия - промышленность', 'Профессия', ['операторы и монтажники установок и машинного оборудования', 'ремесленники и представители других отраслей промышленности', 'техники и младшие специалисты']),
    ('Профессия - низкая квалификация', 'Профессия', ['низкоквалифицированные работники', 'ведение домашнего хозяйства']),
    ('Вы работаете?', 'Вы работаете?', [1]),
    ('Выход на пенсию', 'Выход на пенсию', [1]),
    ('Прекращение работы по болезни', 'Прекращение работы по болезни', [1]),
    ('Сахарный диабет', 'Сахарный диабет', [1]),
    ('Гепатит', 'Гепатит', [1]),
    ('Онкология', 'Онкология', [1]),
    ('Хроническое заболевание легких', 'Хроническое заболевание легких', [1]),
    ('Бронхиальная астма', 'Бронжиальная астма', [1]),
    ('Туберкулез легких', 'Туберкулез легких ', [1]),
    ('ВИЧ/СПИД', 'ВИЧ/СПИД', [1]),
    ('Регулярный прием лекарственных средств', 'Регулярный прим лекарственных средств', [1]),
    ('Травмы за год', 'Травмы за год', [1]),
    ('Переломы', 'Переломы', [1]),
    ('Статус Курения - Бросил(а)', 'Статус Курения', ['Бросил(а)']),
    ('Статус Курения - Курит', 'Статус Курения', ['Курит']),
    ('Статус Курения - Никогда не курил(а)', 'Статус Курения', ['Никогда не курил(а)']),
    ('Пассивное курение', 'Пассивное курение', [1]),
    ('Алкоголь - никогда не употреблял', 'Алкоголь', ['никогда не употреблял']),
    ('Алкоголь - ранее употреблял', 'Алкоголь', ['ранее употреблял']),
    ('Алкоголь - употребляю в настоящее время', 'Алкоголь', ['употребляю в настоящее время']),
    ('Сон после обеда', 'Сон после обеда', [1]),
    ('Спорт клубы', 'Спорт, клубы', [1]),
    ('Религия клубы', 'Религия, клубы', [1]),
]

def second_hand_smoke_count(value):
    if value == '1-2 раза в неделю':
        return 1.5
    if value == '2-3 раза в день':
        return 17.5
    if value == '3-6 раз в неделю':
        return 4.5
    if value == '4 и более раз в день':
        return 28.0
    if value == 'не менее 1 раза в день':
        return 7.0
    return 0.0

def round_time(hour, min):
    if min <= 15:
        return hour, 0
    if 15 < min < 45:
        return hour, 30
    return hour + 1, 0

def sleep_time(value):
    hour, min, sec = map(int, value.split(':'))
    hour, min = round_time(hour, min)

    if hour >= 23:
        return (hour - 23) + min / 60
    if hour < 12:
        return hour + 1 + min / 60
    return (hour + min / 60) - 23

def wakeup_time(value):
    hour, min, sec = map(int, value.split(':'))
    hour, min = round_time(hour, min)

    if hour >= 7:
        return (hour - 7) + min / 60
    return (hour + min / 60) - 7

def create_features(data : pd.DataFrame, is_train : bool) -> pd.DataFrame:
    
    if is_train:
        data['Пол'].fillna('Ж', inplace=True)  # 54-701-009-01
        data['Время засыпания'].replace('12:00:00', '00:00:00', inplace=True)  # 54-002-054-02
        data.loc[data['Частота пасс кур'].isna() == False, 'Пассивное курение'] = 1  # 54-001-079-01
    
    else:
        data['Статус Курения'].replace('Никогда не курил', 'Никогда не курил(а)', inplace=True)  # 54-701-037-01
        data['Время засыпания'].replace('09:00:00', '21:00:00', inplace=True)  # 54-602-001-01
        data['Время засыпания'].replace('00:00:30', '00:30:00', inplace=True)  # 54-103-014-01
        data['Время пробуждения'].replace('00:06:00', '06:00:00', inplace=True)
        
    no_time = (data['Время засыпания'] == data['Время пробуждения'])
    data.loc[no_time, ['Время засыпания']] = '23:00:00'
    data.loc[no_time, ['Время пробуждения']] = '07:00:00'
    
    data.fillna(0, inplace=True)
    
    features = data[['ID']].copy()
    
    if is_train:
        for target in TARGETS:
            features[target] = data[target] == 1 
            
    for name, column, values in base_features:
        features[name] = data[column].isin(values)
        
    features['Возраст курения'] = data['Возраст курения']
    features['Сигарет в день'] = data['Сигарет в день']
    features['Возраст алког'] = data['Возраст алког']
    features['Образование - Уровень'] = data['Образование'].str[0].astype(int)
    
    features['Одинокий мужчина'] = features['Пол - М'] & features['Семья - живет один']
    features['Одинокая женщина'] = (~features['Пол - М']) & features['Семья - живет один']

    features['Без работы и не на пенсии'] = (~features['Вы работаете?']) & (~features['Выход на пенсию'])

    features['Сигарет в день (сейчас)'] = features['Сигарет в день']
    features.loc[features['Статус Курения - Бросил(а)'], 'Сигарет в день (сейчас)'] = 0
    
    features['Частота пасс кур'] = data['Частота пасс кур'].apply(second_hand_smoke_count)

    features['Болезнь легких'] = features['Хроническое заболевание легких'] | features['Бронхиальная астма'] | features['Туберкулез легких']
    features['Инфекционная болезнь'] = features['Гепатит'] | features['ВИЧ/СПИД']
    features['Хроническая болезнь'] = features['Болезнь легких'] | features['Инфекционная болезнь'] | features['Сахарный диабет'] | features['Онкология']
    features['Регулярный прием лекарственных средств без болезней из опроса'] = (features['Хроническая болезнь'] == False) & features['Регулярный прием лекарственных средств']
    features['Больной'] = features['Хроническая болезнь'] | features['Прекращение работы по болезни'] | features['Регулярный прием лекарственных средств']
    features['Травмы / переломы'] = features['Травмы за год'] | features['Переломы']
    features['Идеальное здоровье'] = (features['Больной'] == False) & (features['Травмы / переломы'] == False)
    features['Без вредных привычек'] = features['Статус Курения - Никогда не курил(а)'] & features['Алкоголь - никогда не употреблял']
    features['Бросил вредную привычку'] = features['Статус Курения - Бросил(а)'] | features['Алкоголь - ранее употреблял']
    features['Макс. возраст вредной привычки'] = features[['Возраст курения', 'Возраст алког']].max(axis=1)
    features['Само совершенство'] = features['Идеальное здоровье'] & features['Без вредных привычек'] & (features['Пассивное курение'] == False)
    features['Активное или пассивное курение'] = features['Пассивное курение'] | features['Статус Курения - Курит']
    
    features['Продолжительность сна'] = 8 + data['Время пробуждения'].apply(wakeup_time) \
                                   - data['Время засыпания'].apply(sleep_time)
    
    features[features.columns[1:]] = features[features.columns[1:]].astype(float)
    features = features.set_index('ID')
    return features
